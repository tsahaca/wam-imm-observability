version: '3.3'
# Creates all infrastructure needed

services:

  atp-ui-service:
    image: atp-ui-service:0.0.1-SNAPSHOT
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka

  atp-posting-service:
    image: atp-posting-service:0.0.1-SNAPSHOT
    ports:
      - 9085:8081
    depends_on:
      - zookeeper
      - kafka
      - postgres-atp
    environment:
      - SPRING_DATASOURCE_JDBC-URL=jdbc:postgresql://postgres-atp:5432/atpservice
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  compliance-preclear-service:
    image: compliance-preclear-service:0.0.1-SNAPSHOT
    ports:
      - 9086:8082
    depends_on:
      - zookeeper
      - kafka
      - postgres-compliance
    environment:
      - SPRING_DATASOURCE_JDBC-URL=jdbc:postgresql://postgres-compliance:5432/complianceservice
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  postgres-atp:
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=atpservice

  postgres-compliance:
    image: postgres
    ports:
      - 5431:5431
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=complianceservice

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
      - 14268
      - 14250

  otel-collector:
    image: otel/opentelemetry-collector:0.47.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888  # pprof extension
      - 13133:13133 # health_check extension
      - 4317        # OTLP gRPC receiver
      - 55670:55679 # zpages extension
    depends_on:
      - jaeger-all-in-one

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - 22181:2181
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 29092:29092
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

############# FROM WAM IMM TRADING APP DOCKER COMPOSE ##################

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    ports:
      - 2182:2182
    environment:
      HOSTNAME: localhost
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: localhost:2889:3889

  kafka:
    image: confluentinc/cp-enterprise-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper

    environment:
      KAFKA_BROKER_ID: 10
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: OUTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: OUTER://localhost:19092,PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_RETENTION_MINUTES: 120 # 2 hours
      KAFKA_LOG_RETENTION_BYTES: 262144000 # 250 MB
      KAFKA_LOG_SEGMENT_BYTES: 524288000 # 500 MB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_MIN_ISYNC_REPLICAS: 1
      KAFKA_LOG4J_LOGGERS: "kafka=WARN,kafka.server=WARN,kafka.controller=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"
      KAFKA_TRANSACTION_STATE_LOG_NUM_PARTITIONS: 2
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 2
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      CONFLUENT_METRICS_REPORTER_PUBLISH_MS: 3000
      KAFKA_MAX_MESSAGE_BYTES: 90000000

    ports:
      - "19092:19092"
      - "9092:9092"

  topic-initializer:
    image: confluentinc/cp-enterprise-kafka:7.2.1
    hostname: localhost
    container_name: initializer
    depends_on:
        - kafka
        - zookeeper
    command: "bash -c -a 'echo Waiting for Kafka to be ready... && \
                         /etc/confluent/docker/configure && \
                         cub kafka-ready -b kafka:9092 1 60 && \
                         sleep 5 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic security-price --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic security-analytic --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic security --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic fxRate --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic position-analytics --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic sod-eod-analytics --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic sod --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic eod --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic blockorders --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic portfolio-dap --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic gainloss-sod --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic gainloss-atp --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic gain-loss --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic lend-borrow --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic collateral --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic model-clone-lot --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic atp-collateral --create --replication-factor 1 --partitions 4 &&  \
                         kafka-topics --bootstrap-server kafka:9092 --topic position --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic sod-eod --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic metadata --create --replication-factor 1 --partitions 4 && \
                         kafka-topics --bootstrap-server kafka:9092 --topic lots-manager --create --replication-factor 1 --partitions 4 '"

    environment:
        CONNECT_BOOTSTRAP_SERVERS: ignored
        KAFKA_ZOOKEEPER_CONNECT: ignored
        KAFKA_ADVERTISED_LISTENERS: ignored

  schema-registry:
      image: confluentinc/cp-schema-registry:7.2.1
      restart: always
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - zookeeper
        - kafka
      environment:
        SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      ports:
        - 8085:8085

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021      -


############# END OF WAM IMM TRADING APP DOCKER COMPOSE ##############